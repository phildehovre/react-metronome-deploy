[{"/Users/philippedehovre/DEVELOPMENT/REACT/netlify-deploy-test/react-metronome-deploy/src/index.js":"1","/Users/philippedehovre/DEVELOPMENT/REACT/netlify-deploy-test/react-metronome-deploy/src/components/App.js":"2","/Users/philippedehovre/DEVELOPMENT/REACT/netlify-deploy-test/react-metronome-deploy/src/components/Metronome.js":"3"},{"size":152,"mtime":1610811644000,"results":"4","hashOfConfig":"5"},{"size":3579,"mtime":1610815829000,"results":"6","hashOfConfig":"5"},{"size":2397,"mtime":1610815767000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1b5xmcu",{"filePath":"11","messages":"12","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/philippedehovre/DEVELOPMENT/REACT/netlify-deploy-test/react-metronome-deploy/src/index.js",[],["16","17"],"/Users/philippedehovre/DEVELOPMENT/REACT/netlify-deploy-test/react-metronome-deploy/src/components/App.js",["18","19","20"],"import React, { useState, useEffect } from 'react';\nimport useSound from 'use-sound';\nimport Metronome from './Metronome';\nimport axios from 'axios'\n\n// Sound effects\n\nimport Sidestick from '../ressources/Click.wav';\nimport Cowbell from '../ressources/Cowbell.mp3';\nimport Woodblock from '../ressources/Woodblock.mp3';\n\n\nconst API_KEY = '93f2be180a4be75f06c1a7d2829e8bbc'\n\nexport default function App() {\n\n    const [play, setPlay] = useState(false)\n    const [bpm, setBpm] = useState(120)\n    const [tempoInterval, setTempoInterval] = useState(null)\n    const [tapped, setTapped] = useState()\n    const [light, setLight] = useState(false)\n    const [soundEffect, setSoundEffect] = useState(Sidestick)\n    const [debouncedBpm, setDebouncedBpm] = useState(bpm)\n    const [songs, setSongs] = useState([])\n\n    const [cowbell] = useSound(Cowbell)\n    const [woodblock] = useSound(Woodblock)\n    const [sidestick] = useSound(Sidestick)\n\n    // Tap Tempo Logic:\n\n    const tapTempo = () => {\n        if (tapped) {\n            let elapsed = (new Date().getTime()) - tapped\n            if (elapsed < 3000) {\n                const tappedBpm = Math.round((6000/elapsed)*10)\n                setBpm(tappedBpm)\n            }\n            else {\n                setTapped(new Date().getTime())\n            } \n        } \n        setTapped(new Date().getTime())\n\n    } \n\n    // Tempo selection range limiter:\n\n    const checkBpm = () => {\n        if (bpm <= 40) {\n            setBpm(40)\n        } else if (bpm >= 220) {\n            setBpm(220)\n        }\n    }  \n\n    const playSound = () => {\n        if (soundEffect === 'cowbell') {\n            cowbell()\n        } else if (soundEffect === 'woodblock') {\n            woodblock()\n        } else {\n            sidestick()\n        }\n    }\n        \n    \n    // Sound and Visual:\n\n    const trigger = (duration) => {\n        if (play) {\n            playSound()\n            setLight(!true)\n            setTimeout(() => {setLight(!false)}, duration/2)\n        } else {\n            return;\n        }\n    }\n    \n    const startClick = () => {\n        setPlay(!play)      \n    }\n    \n    // Tempo setter:\n\n    useEffect(() => {\n        const intervalId = setInterval(() => {\n            trigger(tempoInterval);\n        }, tempoInterval)\n\n        return (() => {clearInterval(intervalId)})\n    }, [play, tempoInterval, soundEffect ])\n    \n\n    useEffect(() => {\n        setTempoInterval((60/bpm)*1000);\n        checkBpm();\n        const intervalId = setTimeout(() => {\n            setDebouncedBpm(bpm)\n            }, 1000);\n        return (() => {\n            (clearTimeout(intervalId))\n        })\n    }, [bpm])\n        \n\n    useEffect(() => {\n      (async () => {\n        const res = await axios.get(`https://api.getsongbpm.com/tempo/`, {\n          headers: {\n            Authorization: API_KEY,\n          },\n          params: {\n          bpm: debouncedBpm\n        }})\n        setSongs(res.data)\n        console.log(res.data)\n      })()\n    }, [debouncedBpm])\n\n    return (\n        <>\n        <div className=\"metronome\">\n            <Metronome \n                bpm={bpm} \n                setBpm={setBpm} \n                startClick={startClick} \n                tapTempo={tapTempo}\n                light={light}\n                isPlaying={play}\n                setSoundEffect={setSoundEffect}\n                soundEffect={soundEffect}\n                />\n        </div> <br />\n        <div className=\"bottom\">\n          Â©Philippe De Hovre 2021\n        </div>\n        {/* <div>\n            <SongList songs={songs}/>\n        </div> */}\n        </>\n    )\n}\n","/Users/philippedehovre/DEVELOPMENT/REACT/netlify-deploy-test/react-metronome-deploy/src/components/Metronome.js",[],{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","severity":1,"message":"26","line":24,"column":12,"nodeType":"27","messageId":"28","endLine":24,"endColumn":17},{"ruleId":"29","severity":1,"message":"30","line":92,"column":8,"nodeType":"31","endLine":92,"endColumn":43,"suggestions":"32"},{"ruleId":"29","severity":1,"message":"33","line":104,"column":8,"nodeType":"31","endLine":104,"endColumn":13,"suggestions":"34"},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-unused-vars","'songs' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'trigger'. Either include it or remove the dependency array.","ArrayExpression",["37"],"React Hook useEffect has a missing dependency: 'checkBpm'. Either include it or remove the dependency array.",["38"],"no-global-assign","no-unsafe-negation",{"desc":"39","fix":"40"},{"desc":"41","fix":"42"},"Update the dependencies array to be: [play, tempoInterval, soundEffect, trigger]",{"range":"43","text":"44"},"Update the dependencies array to be: [bpm, checkBpm]",{"range":"45","text":"46"},[2321,2356],"[play, tempoInterval, soundEffect, trigger]",[2629,2634],"[bpm, checkBpm]"]